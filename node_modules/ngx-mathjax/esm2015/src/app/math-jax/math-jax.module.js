/**
 * @author davidshen84
 */
import * as tslib_1 from "tslib";
var MathJaxModule_1;
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MathJaxDirective } from './math-jax.directive';
import { MathJaxService } from './math-jax.service';
/**
 * Module configuration class.
 *
 * @example
 *
 * {
 *   version: '2.7.5',
 *   config: 'TeX-AMS_HTML',
 *   hostname: 'cdnjs.cloudflare.com'
 * }
 */
export class ModuleConfiguration {
}
/**
 * Module to load and configure the MathJax library.
 *
 * @example
 *
 * MathJaxModule.config(
 * {
 *     version: '2.7.5',
 *     config: 'TeX-AMS_HTML',
 *     hostname: 'cdnjs.cloudflare.com'
 * })
 */
let MathJaxModule = MathJaxModule_1 = class MathJaxModule {
    constructor(service, moduleConfig) {
        service.init();
        /**
         * Define the **function string** to be inserted into the mathjax configuration script block.
         */
        const mathJaxHubConfig = (() => {
            MathJax.Hub.Config({
                skipStartupTypeset: true,
                messageStyle: 'none',
                tex2jax: { preview: 'none' }
            });
            MathJax.Hub.Register.StartupHook('End', () => {
                window.mathJaxHub$.next();
                window.mathJaxHub$.complete();
            });
        }).toString();
        if (moduleConfig) {
            /**
             * Insert the MathJax configuration script into the Head element.
             */
            (function () {
                const script = document.createElement('script');
                script.type = 'text/x-mathjax-config';
                script.text = `(${mathJaxHubConfig})();`;
                document.getElementsByTagName('head')[0].appendChild(script);
            })();
            /**
             * Insert the script block to load the MathJax library.
             */
            (function (version, config, hostname) {
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = `https://${hostname}/ajax/libs/mathjax/${version}/MathJax.js?config=${config}`;
                script.async = true;
                document.getElementsByTagName('head')[0].appendChild(script);
            })(moduleConfig.version, moduleConfig.config, moduleConfig.hostname);
        }
    }
    /**
     * Configure the provider for hte module.
     *
     * @deprecated Use forRoot or forChild method instead.
     * @param forRoot Make sure it is set to `true` for the root module and `false` for any child module.
     * @param moduleConfiguration A {ModuleConfiguration} instance.
     */
    static config(forRoot = true, moduleConfiguration = {
        version: '2.7.5',
        config: 'TeX-AMS_HTML',
        hostname: 'cdnjs.cloudflare.com'
    }) {
        return forRoot ? {
            ngModule: MathJaxModule_1,
            providers: [
                { provide: ModuleConfiguration, useValue: moduleConfiguration },
                { provide: MathJaxService, useClass: MathJaxService },
            ]
        } : {
            ngModule: MathJaxModule_1
        };
    }
    /**
     * Configure the module for the root module.
     *
     * @param moduleConfiguration A {ModuleConfiguration} instance.
     */
    static forRoot(moduleConfiguration = {
        version: '2.7.5',
        config: 'TeX-AMS_HTML',
        hostname: 'cdnjs.cloudflare.com'
    }) {
        return {
            ngModule: MathJaxModule_1,
            providers: [
                { provide: ModuleConfiguration, useValue: moduleConfiguration },
                { provide: MathJaxService, useClass: MathJaxService },
            ]
        };
    }
    /**
     * Configure the module for a child module.
     */
    static forChild() {
        return {
            ngModule: MathJaxModule_1
        };
    }
};
MathJaxModule = MathJaxModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [MathJaxDirective],
        imports: [
            CommonModule
        ],
        exports: [MathJaxDirective]
    }),
    tslib_1.__metadata("design:paramtypes", [MathJaxService, ModuleConfiguration])
], MathJaxModule);
export { MathJaxModule };
//# sourceMappingURL=data:application/json;base64,