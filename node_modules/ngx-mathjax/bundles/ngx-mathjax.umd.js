(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-mathjax', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-mathjax'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, common, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /**
     * A internal utility service.
     */
    var MathJaxService = /** @class */ (function () {
        function MathJaxService() {
            /**
             * Signals when the MathJax object is ready.
             */
            this.MathJaxHub$ = new rxjs.ReplaySubject();
        }
        /**
         * Must call `init` method explicitly during module initialization.
         */
        MathJaxService.prototype.init = function () {
            /**
             * Create a global variable.
             */
            window.mathJaxHub$ = this.MathJaxHub$;
        };
        MathJaxService = __decorate([
            core.Injectable()
        ], MathJaxService);
        return MathJaxService;
    }());

    /**
     * Typeset the content or expressions using MathJax library.
     */
    var MathJaxDirective = /** @class */ (function () {
        function MathJaxDirective(el, service) {
            var _this = this;
            /**
             * Observes the change of the input expression.
             */
            this.expressionChangeSubject = new rxjs.ReplaySubject();
            /**
             * Observes the completion of the initial MathJax typesetting.
             */
            this.mathJaxTypesetSubject = new rxjs.Subject();
            this.mathJaxHub$ = service.MathJaxHub$;
            this.element = el.nativeElement;
            this.typesetSubscription = rxjs.combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject])
                .subscribe(function () {
                MathJax.Hub.Queue(['Typeset', MathJax.Hub, _this.element]);
            });
            this.allJax$ = rxjs.combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject]).pipe(operators.map(function () { return MathJax.Hub.getAllJax(_this.element); }));
            this.expressionChangeSubscription = rxjs.combineLatest([this.allJax$, this.expressionChangeSubject])
                .subscribe(function (_a) {
                var _b = __read(_a, 2), jax = _b[0], updateValue = _b[1];
                return updateValue.forEach(function (v) { return MathJax.Hub.Queue(function () {
                    // Stop pushing messages to the queue when the component is being destroyed.
                    if (!_this.isDestroying) {
                        return jax[v.order].Text(v.value);
                    }
                }); });
            });
        }
        MathJaxDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.hubSubscription = this.mathJaxHub$
                .subscribe(function () {
                MathJax.Hub.Queue(['Typeset', MathJax.Hub, _this.element]);
                MathJax.Hub.Queue(['MathJaxTypeset', _this]);
            });
        };
        /**
         * Explicitly trigger the MathJax typeset process.
         *
         * This is useful if the content is loaded dynamically.
         */
        MathJaxDirective.prototype.MathJaxTypeset = function () {
            this.mathJaxTypesetSubject.next();
        };
        MathJaxDirective.prototype.ngOnChanges = function (changes) {
            var expressions = changes.MathJaxExpressions;
            // Shortcut if there's nothing to update.
            if (!(expressions.currentValue instanceof Array)) {
                return;
            }
            // Update only the changed expressions.
            var updateValues = expressions.currentValue
                .map(function (cv, i) {
                return (expressions.previousValue ? expressions.previousValue[i] !== cv : true) ?
                    {
                        value: expressions.currentValue[i],
                        order: i
                    }
                    : undefined;
            })
                .filter(function (v) { return v; });
            this.expressionChangeSubject.next(updateValues);
        };
        MathJaxDirective.prototype.ngOnDestroy = function () {
            this.isDestroying = true;
            this.expressionChangeSubscription.unsubscribe();
            this.hubSubscription.unsubscribe();
            this.typesetSubscription.unsubscribe();
            this.mathJaxTypesetSubject.complete();
            this.expressionChangeSubject.complete();
        };
        __decorate([
            core.Input('mathjax'),
            __metadata("design:type", Array)
        ], MathJaxDirective.prototype, "MathJaxExpressions", void 0);
        MathJaxDirective = __decorate([
            core.Directive({
                selector: 'mathjax, [mathjax]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, MathJaxService])
        ], MathJaxDirective);
        return MathJaxDirective;
    }());

    /**
     * @author davidshen84
     */
    /**
     * Module configuration class.
     *
     * @example
     *
     * {
     *   version: '2.7.5',
     *   config: 'TeX-AMS_HTML',
     *   hostname: 'cdnjs.cloudflare.com'
     * }
     */
    var ModuleConfiguration = /** @class */ (function () {
        function ModuleConfiguration() {
        }
        return ModuleConfiguration;
    }());
    /**
     * Module to load and configure the MathJax library.
     *
     * @example
     *
     * MathJaxModule.config(
     * {
     *     version: '2.7.5',
     *     config: 'TeX-AMS_HTML',
     *     hostname: 'cdnjs.cloudflare.com'
     * })
     */
    var MathJaxModule = /** @class */ (function () {
        function MathJaxModule(service, moduleConfig) {
            service.init();
            /**
             * Define the **function string** to be inserted into the mathjax configuration script block.
             */
            var mathJaxHubConfig = (function () {
                MathJax.Hub.Config({
                    skipStartupTypeset: true,
                    messageStyle: 'none',
                    tex2jax: { preview: 'none' }
                });
                MathJax.Hub.Register.StartupHook('End', function () {
                    window.mathJaxHub$.next();
                    window.mathJaxHub$.complete();
                });
            }).toString();
            if (moduleConfig) {
                /**
                 * Insert the MathJax configuration script into the Head element.
                 */
                (function () {
                    var script = document.createElement('script');
                    script.type = 'text/x-mathjax-config';
                    script.text = "(" + mathJaxHubConfig + ")();";
                    document.getElementsByTagName('head')[0].appendChild(script);
                })();
                /**
                 * Insert the script block to load the MathJax library.
                 */
                (function (version, config, hostname) {
                    var script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = "https://" + hostname + "/ajax/libs/mathjax/" + version + "/MathJax.js?config=" + config;
                    script.async = true;
                    document.getElementsByTagName('head')[0].appendChild(script);
                })(moduleConfig.version, moduleConfig.config, moduleConfig.hostname);
            }
        }
        MathJaxModule_1 = MathJaxModule;
        /**
         * Configure the provider for hte module.
         *
         * @deprecated Use forRoot or forChild method instead.
         * @param forRoot Make sure it is set to `true` for the root module and `false` for any child module.
         * @param moduleConfiguration A {ModuleConfiguration} instance.
         */
        MathJaxModule.config = function (forRoot, moduleConfiguration) {
            if (forRoot === void 0) { forRoot = true; }
            if (moduleConfiguration === void 0) { moduleConfiguration = {
                version: '2.7.5',
                config: 'TeX-AMS_HTML',
                hostname: 'cdnjs.cloudflare.com'
            }; }
            return forRoot ? {
                ngModule: MathJaxModule_1,
                providers: [
                    { provide: ModuleConfiguration, useValue: moduleConfiguration },
                    { provide: MathJaxService, useClass: MathJaxService },
                ]
            } : {
                ngModule: MathJaxModule_1
            };
        };
        /**
         * Configure the module for the root module.
         *
         * @param moduleConfiguration A {ModuleConfiguration} instance.
         */
        MathJaxModule.forRoot = function (moduleConfiguration) {
            if (moduleConfiguration === void 0) { moduleConfiguration = {
                version: '2.7.5',
                config: 'TeX-AMS_HTML',
                hostname: 'cdnjs.cloudflare.com'
            }; }
            return {
                ngModule: MathJaxModule_1,
                providers: [
                    { provide: ModuleConfiguration, useValue: moduleConfiguration },
                    { provide: MathJaxService, useClass: MathJaxService },
                ]
            };
        };
        /**
         * Configure the module for a child module.
         */
        MathJaxModule.forChild = function () {
            return {
                ngModule: MathJaxModule_1
            };
        };
        var MathJaxModule_1;
        MathJaxModule = MathJaxModule_1 = __decorate([
            core.NgModule({
                declarations: [MathJaxDirective],
                imports: [
                    common.CommonModule
                ],
                exports: [MathJaxDirective]
            }),
            __metadata("design:paramtypes", [MathJaxService, ModuleConfiguration])
        ], MathJaxModule);
        return MathJaxModule;
    }());

    exports.MathJaxDirective = MathJaxDirective;
    exports.MathJaxModule = MathJaxModule;
    exports.ModuleConfiguration = ModuleConfiguration;
    exports.ɵa = MathJaxService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-mathjax.umd.js.map
