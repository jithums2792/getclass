import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import { combineLatest, ReplaySubject, Subject } from 'rxjs';
import { MathJaxService } from './math-jax.service';
import { map } from 'rxjs/operators';
/**
 * Typeset the content or expressions using MathJax library.
 */
var MathJaxDirective = /** @class */ (function () {
    function MathJaxDirective(el, service) {
        var _this = this;
        /**
         * Observes the change of the input expression.
         */
        this.expressionChangeSubject = new ReplaySubject();
        /**
         * Observes the completion of the initial MathJax typesetting.
         */
        this.mathJaxTypesetSubject = new Subject();
        this.mathJaxHub$ = service.MathJaxHub$;
        this.element = el.nativeElement;
        this.typesetSubscription = combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject])
            .subscribe(function () {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, _this.element]);
        });
        this.allJax$ = combineLatest([this.mathJaxHub$, this.mathJaxTypesetSubject]).pipe(map(function () { return MathJax.Hub.getAllJax(_this.element); }));
        this.expressionChangeSubscription = combineLatest([this.allJax$, this.expressionChangeSubject])
            .subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), jax = _b[0], updateValue = _b[1];
            return updateValue.forEach(function (v) { return MathJax.Hub.Queue(function () {
                // Stop pushing messages to the queue when the component is being destroyed.
                if (!_this.isDestroying) {
                    return jax[v.order].Text(v.value);
                }
            }); });
        });
    }
    MathJaxDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.hubSubscription = this.mathJaxHub$
            .subscribe(function () {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, _this.element]);
            MathJax.Hub.Queue(['MathJaxTypeset', _this]);
        });
    };
    /**
     * Explicitly trigger the MathJax typeset process.
     *
     * This is useful if the content is loaded dynamically.
     */
    MathJaxDirective.prototype.MathJaxTypeset = function () {
        this.mathJaxTypesetSubject.next();
    };
    MathJaxDirective.prototype.ngOnChanges = function (changes) {
        var expressions = changes.MathJaxExpressions;
        // Shortcut if there's nothing to update.
        if (!(expressions.currentValue instanceof Array)) {
            return;
        }
        // Update only the changed expressions.
        var updateValues = expressions.currentValue
            .map(function (cv, i) {
            return (expressions.previousValue ? expressions.previousValue[i] !== cv : true) ?
                {
                    value: expressions.currentValue[i],
                    order: i
                }
                : undefined;
        })
            .filter(function (v) { return v; });
        this.expressionChangeSubject.next(updateValues);
    };
    MathJaxDirective.prototype.ngOnDestroy = function () {
        this.isDestroying = true;
        this.expressionChangeSubscription.unsubscribe();
        this.hubSubscription.unsubscribe();
        this.typesetSubscription.unsubscribe();
        this.mathJaxTypesetSubject.complete();
        this.expressionChangeSubject.complete();
    };
    tslib_1.__decorate([
        Input('mathjax'),
        tslib_1.__metadata("design:type", Array)
    ], MathJaxDirective.prototype, "MathJaxExpressions", void 0);
    MathJaxDirective = tslib_1.__decorate([
        Directive({
            selector: 'mathjax, [mathjax]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, MathJaxService])
    ], MathJaxDirective);
    return MathJaxDirective;
}());
export { MathJaxDirective };
//# sourceMappingURL=data:application/json;base64,