var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from "@angular/core";
import { GoogleApiService } from "./GoogleApiService";
import { Observable, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
var GoogleAuthService = /** @class */ (function () {
    function GoogleAuthService(googleApi) {
        var _this = this;
        this.googleApi = googleApi;
        this.GoogleAuth = undefined;
        this.googleApi.onLoad().subscribe(function () {
            _this.loadGapiAuth().subscribe();
        });
    }
    GoogleAuthService.prototype.getAuth = function (newInstance) {
        var _this = this;
        if (newInstance === void 0) { newInstance = false; }
        if (!this.GoogleAuth || newInstance) {
            return this.googleApi.onLoad()
                .pipe(mergeMap(function () { return _this.loadGapiAuth(); }));
        }
        return of(this.GoogleAuth);
    };
    GoogleAuthService.prototype.loadGapiAuth = function () {
        var _this = this;
        return new Observable(function (observer) {
            gapi.load('auth2', function () {
                gapi.auth2.init(_this.googleApi.getConfig().getClientConfig()).then(function (auth) {
                    _this.GoogleAuth = auth;
                    observer.next(auth);
                    observer.complete();
                }).catch(function (err) { return observer.error(err); });
            });
        });
    };
    GoogleAuthService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [GoogleApiService])
    ], GoogleAuthService);
    return GoogleAuthService;
}());
export { GoogleAuthService };
